schema {
  query: Query
  mutation: Mutation
}

type Query {
  news: [News]
  tags: [Tags]
  newTags: [NewTag]

  new(id: Int): News
  tag(id: Int):Tags
  newTag(id: Int): NewTag
  profile(id: Int): Profile
}

type Mutation {
  CreateFeebBack(input: InputFeedBacks): ResultCheck

  CreateProfile(input: InputProfile): ResultCheck
  UpdateProfile(id: Int,input: InputProfile): ResultCheck

  refreshToken(token: String): String
}

input InputProfile {
  userId: Int
  firstName: String
  lastName: String
  address: String
  phone: String
  createdAt: String
  modifiedBy: String
}

type ResultCheck {
  status: Boolean
  message: String
}

input InputFeedBacks {
  name: String
  phone: String
  email: String
  address: String
  content: String
}

type News{
  id: Int!
  title: String
  description: String
  image: String
  createdAt: String
  topHot: String
  viewCount: Int
  content: String
  tagId: Int
  active: Boolean
  tags: [Tags]
}

type Tags{
  id: Int
  name: String
}


type NewTag{
  id: Int
  tagId: Int
  newId: Int
  news :[News]
  tags: [Tags]
}


type FeedBacks{
  id: Int
  name: String
  phone: String
  email: String
  address: String
  content: String
  createdAt: String
}

type Profile{
  id: Int
  userId: Int
  firstName: String
  lastName: String
  address: String
  phone: String
  createdAt: String
}

type Users {
  id: Int
  username: String
  password: String
  userDetail: Profile
}

type Menues{
  id: Int
  text: String
  link: String
  target: String
}