schema {
  query: Query
  mutation: Mutation
}

type Query {
  node(id: ID!): Node

  news: News
  tags: Tags
  newTags: NewTag

  new(id: Int): News
  tag(id: Int):Tags
  newTag(id: Int): NewTag
  profile(id: Int): Profile
}

type Mutation {
  SendMail(email: String): Boolean
  AddFriend(id: Int): Boolean
  CreateFeebBack(input: InputFeedBacks): ResultCheck
}

type ResultCheck {
  status: Boolean
  message: String
}

interface Node {
  id: ID!
}


type News implements Node{
  id: ID!
  title: String
  metaTitle: String
  description: String
  image: String
  categoryId: Int
  detail: String
  createdAt: String
  createdBy:String
  modifiedData: String
  modifiedBy: String
  metaKeyWord:String
  metaDescription: String
  topHot: String
  viewCount: Int
  content: String
  tagId: Int
  active: Boolean
  tags: [Tags]
}

type Tags implements Node{
  id: ID!
  name: String
  newId: Int
  news: [News]
  newTag: [NewTag]
}

type ResultTags {
  id: ID!
  name: String
  newId: Int
}


type NewTag implements Node{
  id: ID!
  tagId: Int
  name: String
}

type ResultNewTag {
  id: ID!
  tagId: Int
  name: String
}

type FeedBacks implements Node{
  id: ID!
  name: String
  phone: String
  email: String
  address: String
  content: String
  createdAt: String
}

input InputFeedBacks {
  name: String
  phone: String
  email: String
  address: String
  content: String
}

type Profile implements Node{
  id: ID!
  userId: ID
  firstName: String
  lastName: String
  address: String
  phone: String
  createdAt: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
}

type Users implements Node{
  id: ID!
  username: String
  password: String
  userDetail: Profile
}

type Menues implements Node{
  id: ID!
  text: String
  link: String
  displayOrder: Int
  target: String
}