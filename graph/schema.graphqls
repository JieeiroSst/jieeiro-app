schema {
  query: Query
  mutation: Mutation
}

type Query {
  node(id: ID!): Node

  news: NewsConnection
  tags: TagsConnection
  newTags: NewTagsConnection
  casbin: CasbinConnection
  categories: CategoriesConnection
  contacts: ContactConnection
  feedbacks: FeedBackConnection
  products: ProductConnection
  profile: ProfileConnection
  systemConfig: SystemConfigConnection

  new(id: Int): News
  tag(id: Int):Tags
  newTag(id: Int): NewTag
  casbinId(id: Int): CasbinRule
  category(id: Int): Categories
  contact(id: Int): Contacts
  feedback(id: Int): FeedBacks
  product(id: Int): Products
  profileId(id: Int): Profile
  systemconfig(id: Int): SystemConfig

  refreshToken: String

}

type Mutation {
  CreateNews(input: InputNews): Boolean
  CreateTags(input: InputTags): Boolean
  CreateNewTag(input: InputNewTag): Boolean
  CreateCasbinRule(input: InputCasbinRule): Boolean
  CreateCategories(input: InputCategories): Boolean
  CreateContact(input: InputContact): Boolean
  CreateFeebBack(input: InputFeedBacks): Boolean
  CreateProduct(input: InputProduct): Boolean
  CreateProfile(input: InputProfile): Boolean
  CreateMenues(input: InputMenues): Boolean
  CreateProductCategories(input: InputProductCategory): Boolean
  CreateSliders(input: InputSliders): Boolean

  UpdateNews(id: Int,input: InputNews): Boolean
  UpdateTags(id: Int,input: InputTags): Boolean
  UpdateNewTag(id: Int,input: InputNewTag): Boolean
  UpdateCasbinRule(id: Int,input: InputCasbinRule): Boolean
  UpdateCategories(id: Int,input: InputCategories): Boolean
  UpdateContact(id: Int,input: InputContact): Boolean
  UpdateFeebBack(id: Int,input: InputFeedBacks): Boolean
  UpdateProduct(id: Int,input: InputProduct): Boolean
  UpdateProfile(id: Int,input: InputProfile): Boolean
  UpdateMenues(id: Int,input: InputMenues): Boolean
  UpdateProductCategories(id: Int,input: InputProductCategory): Boolean
  UpdateSliders(id: Int,input: InputSliders): Boolean

  DeleteNews(id: Int): Boolean
  DeleteTags(id: Int): Boolean
  DeleteNewTag(id: Int): Boolean
  DeleteCasbinRule(id: Int): Boolean
  DeleteCategories(id: Int): Boolean
  DeleteContact(id: Int): Boolean
  DeleteFeebBack(id: Int): Boolean
  DeleteProduct(id: Int): Boolean
  DeleteProfile(userId: Int): Boolean
  DeleteMenues(id: Int): Boolean
  DeleteProductCategories(id: Int): Boolean
  DeleteSliders(id: Int): Boolean

  CheckNews(id: Int): Boolean

  PublicNew(id: Int): Boolean

  SendMail(email: String): Boolean

  AddFriend(id: Int): Boolean
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}


type ResultToken {
  token: String
  payload: PayLoad
  refreshToken: String
  refreshExpressIn: String
}

type PayLoad {
  id: Int
  username: String
}

type News implements Node{
  id: ID!
  title: String
  metaTitle: String
  description: String
  image: String
  categoryId: Int
  detail: String
  createdAt: String
  createdBy:String
  modifiedData: String
  modifiedBy: String
  metaKeyWord:String
  metaDescription: String
  topHot: String
  viewCount: Int
  content: String
  tagId: Int
  active: Boolean
  tags: [Tags]
  categories: [Categories]
}

type ResultNews {
  id: ID!
  title: String
  metaTitle: String
  description: String
  image: String
  categoryId: Int
  detail: String
  createdAt: String
  createdBy:String
  modifiedData: String
  modifiedBy: String
  metaKeyWord:String
  metaDescription: String
  topHot: String
  viewCount: Int
  content: String
  tagId: Int
}

input PaginationInput {
  first: Int
  after: String
}

type NewsEdge {
  cursor: String
  node: News
}

type NewsConnection {
  pageInfo: PageInfo
  edges: [NewsEdge]
  totalCount: Int
}

input InputNews {
  title: String
  metaTitle: String
  description: String
  image: String
  categoryId: Int
  detail: String
  createdAt: String
  createdBy:String
  modifiedData: String
  modifiedBy: String
  metaKeyWord:String
  metaDescription: String
  topHot: String
  viewCount: Int
  tagId: Int
  content: String
}

type Tags implements Node{
  id: ID!
  name: String
  newId: Int
  news: [News]
  newTag: [NewTag]
}

type ResultTags {
  id: ID!
  name: String
  newId: Int
}

type TagsEdge {
  cursor: String
  node: Tags
}

type TagsConnection {
  pageInfo: PageInfo
  edges: [TagsEdge]
  totalCount: Int
}

input InputTags {
  name: String
  newId: Int
}

type NewTag implements Node{
  id: ID!
  tagId: Int
  name: String
}

type ResultNewTag {
  id: ID!
  tagId: Int
  name: String
}

type NewTagsEdge {
  cursor: String
  node: NewTag
}

type NewTagsConnection {
  pageInfo: PageInfo
  edges: [NewTagsEdge]
  totalCount: Int
}

input InputNewTag {
  tagId: Int
  name: String
}

type CasbinRule implements Node {
  id: ID!
  pType: String
  v0: String
  v1: String
  v2: String
}

type ResultCasbinRule {
  id: ID!
  pType: String
  v0: String
  v1: String
  v2: String
}

type CasbinRuleEdges {
  cursor: String
  node: CasbinRule
}

type CasbinConnection {
  pageInfo: PageInfo
  edges: [CasbinRuleEdges]
  totalCount: Int
}

input InputCasbinRule {
  id: ID!
  pType: String
  v0: String
  v1: String
  v2: String
}

type Categories implements Node {
  id: ID!
  name: String
  metaTitle: String
  displayOrder: Int
  createdAt: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
  metaKeyword: String
  metaDescription: String
}

type ResultCategories {
  id: ID!
  name: String
  metaTitle: String
  displayOrder: Int
  createdAt: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
  metaKeyword: String
  metaDescription: String
}

type CategoriesEdge {
  cursor: String
  node: Categories
}

type CategoriesConnection {
  pageInfo: PageInfo
  edges: [CategoriesEdge]
  totalCount: Int
}

input InputCategories {
  name: String
  metaTitle: String
  displayOrder: Int
  createdAt: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
  metaKeyword: String
  metaDescription: String
}

type Contacts implements Node{
  id:ID!
  content: String
}

type ResultContact {
  id:ID!
  content: String
}

type ContactEdge {
  cursor: String
  node: Contacts
}

type ContactConnection {
  pageInfo: PageInfo
  edges: [ContactEdge]
  totalCount: Int
}

input InputContact {
  content: String
}

type FeedBacks implements Node{
  id: ID!
  name: String
  phone: String
  email: String
  address: String
  content: String
  createdAt: String
}

type ResultFeedBacks {
  id: ID!
  name: String
  phone: String
  email: String
  address: String
  content: String
  createdAt: String
}

type FeedBackEdge {
  cursor: String
  node: FeedBacks
}

type FeedBackConnection {
  pageInfo: PageInfo
  edges: FeedBackEdge
  totalCount: Int
}

input InputFeedBacks {
  name: String
  phone: String
  email: String
  address: String
  content: String
}

type Products implements Node{
  id: ID!
  code: String
  name: String
  title: String
  description: String
  images: String
  price: Int
  vats: Int
  catedgoryId: Int
  detail: String
  createdDate: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
  topHot: String
  viewCounts: Int
}

type ResultProduct {
  id: ID!
  code: String
  name: String
  title: String
  description: String
  images: String
  price: Int
  vats: Int
  catedgoryId: Int
  detail: String
  createdDate: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
  topHot: String
  viewCounts: Int
}

type ProductEdge {
  cursor: String
  node: Products
}

type ProductConnection {
  pageInfo: PageInfo
  edges: [ProductEdge]
  totalCount: Int
}

input InputProduct {
  code: String
  name: String
  title: String
  description: String
  images: String
  price: Int
  vat: Int
  catedgoryId: Int
  detail: String
  createdDate: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
  topHot: String
}

type Profile implements Node{
  id: ID!
  userId: ID
  firstName: String
  lastName: String
  address: String
  phone: String
  createdAt: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
  friendId: [Int]
}

type ResultProfile {
  id: ID!
  userId: ID
  firstName: String
  lastName: String
  address: String
  phone: String
  createdAt: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
}

type Friend implements Node{
  id: ID!
  friends: [Profile]
}

type ResultFriend {
  id: ID!
}

type ProfileEdge {
  cursor: String
  node: Profile
}

type ProfileConnection {
  pageInfo: PageInfo
  edges: [ProfileEdge]
  totalCount: Int
}

input InputProfile {
  userId: ID!
  firstName: String
  lastName: String
  address: String
  phone: String
  createdAt: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
}

type Users implements Node{
  id: ID!
  username: String
  password: String
  userDetail: Profile
}

type SystemConfig implements Node{
  id: ID!
  name: String
  type: String
  value: String
}

type ResultSystemConfig {
  id: ID!
  name: String
  type: String
  value: String
}

type SystemConfigEdge {
  cursor: String
  node: SystemConfig
}

type SystemConfigConnection {
  pageInfo: PageInfo
  edges: [SystemConfigEdge]
  totalCount: Int
}

type Menues implements Node{
  id: ID!
  text: String
  link: String
  displayOrder: Int
  target: String
}

type ResultMenues {
  text: String
  link: String
  displayOrder: Int
  target: String
}

input InputMenues {
  text: String
  link: String
  displayOrder: Int
  target: String
}

type ProductCategory implements Node{
  id: ID!
  name: String
  metaTitle: String
  displayOrder: Int
  title: String
  createdAt: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
  description: String
}

type ResultProductCategory {
  id: ID!
  name: String
  metaTitle: String
  displayOrder: Int
  title: String
  createdAt: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
  description: String
}

input InputProductCategory {
  name: String
  metaTitle: String
  displayOrder: Int
  title: String
  createdAt: String
  createdBy: String
  modifiedDate: String
  modifiedBy: String
  description: String
}

type Sliders implements Node{
  id: ID!
  image: String
  displayOrder: Int
  link: String
  description: String
  createdAt: String
  modifiedAt: String
  modifiedBy: String
}

type ResultSliders {
  id: ID!
  image: String
  displayOrder: Int
  link: String
  description: String
  createdAt: String
  modifiedAt: String
  modifiedBy: String
}

input InputSliders {
  image: String
  displayOrder: Int
  link: String
  description: String
  createdAt: String
  modifiedAt: String
  modifiedBy: String
}