schema {
  query: Query
  mutation: Mutation
}

type Query {
  node(id: ID!): Node

  news: NewsConnection
  tags: TagsConnection
  newTags: NewTagsConnection
  feedbacks: FeedBackConnection
  profile: ProfileConnection
  systemConfig: SystemConfigConnection

  new(id: Int): News
  tag(id: Int):Tags
  newTag(id: Int): NewTag
  feedback(id: Int): FeedBacks
  profileId(id: Int): Profile
  systemconfig(id: Int): SystemConfig
  refreshToken: String
}

type Mutation {
  CreateNews(input: InputNews): ResultCheck
  CreateTags(input: InputTags): ResultCheck
  CreateNewTag(input: InputNewTag): ResultCheck
  CreateFeebBack(input: InputFeedBacks): ResultCheck
  CreateProfile(input: InputProfile): ResultCheck
  CreateMenues(input: InputMenues): ResultCheck

  UpdateNews(id: Int,input: InputNews): ResultCheck
  UpdateTags(id: Int,input: InputTags): ResultCheck
  UpdateNewTag(id: Int,input: InputNewTag): ResultCheck
  UpdateFeebBack(id: Int,input: InputFeedBacks): ResultCheck
  UpdateProfile(id: Int,input: InputProfile): ResultCheck
  UpdateMenues(id: Int,input: InputMenues): ResultCheck

  DeleteNews(id: Int): ResultCheck
  DeleteTags(id: Int): ResultCheck
  DeleteNewTag(id: Int): ResultCheck
  DeleteFeebBack(id: Int): ResultCheck
  DeleteProfile(id: Int): ResultCheck
  DeleteMenues(id: Int): ResultCheck

  CheckNews(id: Int): ResultCheck

  PublicNew(id: Int): ResultCheck

  SendMail(email: String): ResultCheck

  AddFriend(id: Int): ResultCheck
}

type ResultCheck {
  status: Boolean
  message: String
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type News implements Node{
  id: ID!
  title: String
  description: String
  image: String
  detail: String
  createdAt: String
  topHot: String
  viewCount: Int
  content: String
  tagId: Int
  active: Boolean
  tags: [Tags]
}

type ResultNews {
  id: ID!
  title: String
  description: String
  image: String
  detail: String
  createdAt: String
  topHot: String
  viewCount: Int
  content: String
  tagId: Int
  active: Boolean
}

input PaginationInput {
  first: Int
  after: String
}

type NewsEdge {
  cursor: String
  node: News
}

type NewsConnection {
  pageInfo: PageInfo
  edges: [NewsEdge]
  totalCount: Int
}

input InputNews {
  title: String
  description: String
  image: String
  detail: String
  createdAt: String
  topHot: String
  viewCount: Int
  content: String
  tagId: Int
  active: Boolean
}

type Tags implements Node{
  id: ID!
  name: String
}

type ResultTags {
  name: String
  newId: Int
}

type TagsEdge {
  cursor: String
  node: Tags
}

type TagsConnection {
  pageInfo: PageInfo
  edges: [TagsEdge]
  totalCount: Int
}

input InputTags {
  name: String
}

type NewTag implements Node{
  id: ID!
  tagId: Int
  newId: Int
  tags: [Tags]
  news: [News]
}

type ResultNewTag {
  id: ID!
  tagId: Int
  newId: Int
}

type NewTagsEdge {
  cursor: String
  node: NewTag
}

type NewTagsConnection {
  pageInfo: PageInfo
  edges: [NewTagsEdge]
  totalCount: Int
}

input InputNewTag {
  tagId: Int
  newId: Int
}

type FeedBacks implements Node{
  id: ID!
  name: String
  phone: String
  email: String
  address: String
  content: String
  createdAt: String
}

type ResultFeedBacks {
  id: ID!
  name: String
  phone: String
  email: String
  address: String
  content: String
  createdAt: String
}

type FeedBackEdge {
  cursor: String
  node: FeedBacks
}

type FeedBackConnection {
  pageInfo: PageInfo
  edges: FeedBackEdge
  totalCount: Int
}

input InputFeedBacks {
  name: String
  phone: String
  email: String
  address: String
  content: String
}

type Profile implements Node{
  id: ID!
  userId: ID
  firstName: String
  lastName: String
  address: String
  phone: String
  createdAt: String
}

type ResultProfile {
  id: ID!
  userId: ID
  firstName: String
  lastName: String
  address: String
  phone: String
  createdAt: String
  modifiedBy: String
}

type Friend implements Node{
  id: ID!
  friends: [Profile]
}

type ResultFriend {
  id: ID!
}

type ProfileEdge {
  cursor: String
  node: Profile
}

type ProfileConnection {
  pageInfo: PageInfo
  edges: [ProfileEdge]
  totalCount: Int
}

input InputProfile {
  userId: ID
  firstName: String
  lastName: String
  address: String
  phone: String
  createdAt: String
  modifiedBy: String
}

type Users implements Node{
  id: ID!
  username: String
  password: String
  userDetail: Profile
}

type SystemConfig implements Node{
  id: ID!
  name: String
  type: String
  value: String
}

type ResultSystemConfig {
  id: ID!
  name: String
  type: String
  value: String
}

type SystemConfigEdge {
  cursor: String
  node: SystemConfig
}

type SystemConfigConnection {
  pageInfo: PageInfo
  edges: [SystemConfigEdge]
  totalCount: Int
}

type Menues implements Node{
  id: ID!
  text: String
  link: String
  target: String
}

type ResultMenues {
  text: String
  link: String
  displayOrder: Int
  target: String
}

input InputMenues {
  text: String
  link: String
  displayOrder: Int
  target: String
}
